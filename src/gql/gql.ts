/* eslint-disable */
import * as types from './graphql';
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel or swc plugin for production.
 */
const documents = {
    "\n  fragment SellerDashboard_GetProductDetails_SizesFragment on ProductSize {\n    id\n    size\n  }\n": types.SellerDashboard_GetProductDetails_SizesFragmentFragmentDoc,
    "\n  query SellerDashboard_ProductDetailsQuery($slug: String!) {\n    SellerDashboard_GetProductDetails(slug: $slug) {\n      id\n      slug\n      product_title\n      product_sku\n      category_id\n      brand_id\n      product_description\n      lowest_offer\n      consignment\n      product_sizes {\n        id\n        size\n        ...SellerDashboard_GetProductDetails_SizesFragment\n      }\n    }\n  }\n": types.SellerDashboard_ProductDetailsQueryDocument,
    "\n  query SellerDashboard_GetBrandsAndCategories {\n    SellerDashboard_BrandsAndCategories {\n      brands {\n        id\n        brand_name\n      }\n      categories {\n        id\n        cat_name\n      }\n    }\n  }\n": types.SellerDashboard_GetBrandsAndCategoriesDocument,
    "\n  mutation SellerDashboard_UpdateProductInformationMutation(\n    $id: Int!\n    $product_title: String!\n    $slug: String!\n    $product_sku: String!\n    $category_id: Int!\n    $new_category: String\n    $brand_id: Int!\n    $new_brand: String\n    $product_description: String\n    $lowest_offer: Float!\n  ) {\n    SellerDashboard_UpdateProductInformation(\n      id: $id\n      product_title: $product_title\n      slug: $slug\n      product_sku: $product_sku\n      category_id: $category_id\n      new_category: $new_category\n      brand_id: $brand_id\n      new_brand: $new_brand\n      product_description: $product_description\n      lowest_offer: $lowest_offer\n    ) {\n      product {\n        id\n        product_title\n        slug\n        product_sku\n        category_id\n        brand_id\n        product_description\n        lowest_offer\n      }\n      success\n      message\n    }\n  }\n": types.SellerDashboard_UpdateProductInformationMutationDocument,
    "\n  query SellerDashboard_ImageQuery($slug: String!) {\n    SellerDashboard_Image(slug: $slug) {\n      image_file\n    }\n  }\n": types.SellerDashboard_ImageQueryDocument,
    "\n  mutation SellerDashboard_UpdateStockMutation($array: String!) {\n    SellerDashboard_UpdateStock(array: $array) {\n      success\n      message\n    }\n  }\n": types.SellerDashboard_UpdateStockMutationDocument,
    "\n  query SELLER_DASHBOARD__GET_PRODUCT_IS_CONSIGNMENT($slug: String!) {\n    SellerDashboard_GetProductIsConsignment(slug: $slug)\n  }\n": types.Seller_Dashboard__Get_Product_Is_ConsignmentDocument,
    "\n  query SellerDashboard_StockQuery($slug: String!) {\n    SellerDashboard_Stock(slug: $slug) {\n      seller_dashboard_product_sizes {\n        id\n        seller_dashboard_size {\n          size\n        }\n        seller_dashboard_offer {\n          prod_size\n          ready_stock\n        }\n      }\n    }\n  }\n": types.SellerDashboard_StockQueryDocument,
    "\n  fragment SellerDashboard_ProductFragment on Product {\n    id\n    product_title\n    product_sku\n    slug\n    image {\n      image_file\n    }\n  }\n": types.SellerDashboard_ProductFragmentFragmentDoc,
    "\n  query SellerDashboard_ProductsQuery {\n    SellerDashboard_Products {\n      ...SellerDashboard_ProductFragment\n    }\n  }\n": types.SellerDashboard_ProductsQueryDocument,
    "\n    mutation Login($email: String!, $password: String!) {\n        LoginMutation(email: $email, password: $password) {\n            user {\n                id\n                email\n                name\n                role\n            }\n            success\n            message\n            access_token\n        }\n    }\n": types.LoginDocument,
    "\n    mutation Register(\n        $email: String!\n        $password: String!\n        $mobile: String!\n        $birthdate: String!\n        $name: String!\n        $referral_code: String\n    ) {\n        register(\n            email: $email\n            password: $password\n            mobile: $mobile\n            birthdate: $birthdate\n            name: $name\n            referral_code: $referral_code\n        ) {\n            success\n            message\n        }\n    }\n": types.RegisterDocument,
    "\n    mutation ForgotPassword($email: String!) {\n        forgotPassword(email: $email) {\n            success\n            message\n        }\n    }\n": types.ForgotPasswordDocument,
    "\n    mutation ResetPassword(\n        $email: String!\n        $password: String!\n        $token: String!\n    ) {\n        resetPassword(email: $email, password: $password, token: $token) {\n            success\n            message\n        }\n    }\n": types.ResetPasswordDocument,
    "\n  mutation CreateProductOffer(\n    $size: String!\n    $product_size_id: Int!\n    $price: Int!\n    $list_type: String!\n  ) {\n    createProductOffer(\n      size: $size\n      product_size_id: $product_size_id\n      price: $price\n      list_type: $list_type\n    ) {\n      success\n      message\n    }\n  }\n": types.CreateProductOfferDocument,
    "\n  mutation UpdateProductOffer($offer_id: Int!, $price: Int!) {\n    UpdateProductOffer(offer_id: $offer_id, price: $price) {\n      success\n      message\n    }\n  }\n": types.UpdateProductOfferDocument,
    "\n  mutation SellerDashboard_PublishPendingProductOfferMutation(\n    $offer_ids: [Int!]!\n  ) {\n    SellerDashboard_PublishPendingProductOffer(offer_ids: $offer_ids) {\n      success\n      message\n      product_offers {\n        id\n        user_id\n        offer_price\n        prod_size\n        created_at\n        product_size_id\n        in_store\n        product {\n          slug\n          product_title\n          product_sku\n          image {\n            image_file\n          }\n        }\n      }\n    }\n  }\n": types.SellerDashboard_PublishPendingProductOfferMutationDocument,
    "\n    mutation UpdateUserProfile(\n        $name: String\n        $email: String\n        $mobile: String\n        $birthdate: String\n        $vacation_mode: Int\n    ) {\n        updateUserProfile(\n            name: $name\n            email: $email\n            mobile: $mobile\n            birthdate: $birthdate\n            vacation_mode: $vacation_mode\n        ) {\n            success\n            message\n        }\n    }\n": types.UpdateUserProfileDocument,
    "\n    mutation UpdateUserPassword(\n        $current_password: String\n        $new_password: String\n    ) {\n        updateUserPassword(\n            current_password: $current_password\n            new_password: $new_password\n        ) {\n            success\n            message\n        }\n    }\n": types.UpdateUserPasswordDocument,
    "\n    mutation UpdateUserAddress(\n        $id: Int\n        $name: String\n        $address_type: String\n        $address_1: String\n        $address_2: String\n        $pincode: String\n        $city: String\n        $country: String\n        $state: String\n        $mobile: String\n    ) {\n        updateUserAddress(\n            id: $id\n            name: $name\n            address_type: $address_type\n            address_1: $address_1\n            address_2: $address_2\n            pincode: $pincode\n            city: $city\n            country: $country\n            state: $state\n            mobile: $mobile\n        ) {\n            success\n            message\n        }\n    }\n": types.UpdateUserAddressDocument,
    "\n  mutation ApplyPromoCode($promoCode: String!) {\n    applyPromoCode(promo_code: $promoCode) {\n      success\n      id\n      code\n      maximum_discount\n      discount\n      discount_type\n      success\n      message\n    }\n  }\n": types.ApplyPromoCodeDocument,
    "\n  mutation OnboardSeller {\n    OnboardSeller {\n      url\n      success\n      message\n    }\n  }\n": types.OnboardSellerDocument,
    "\n  query GetProductOffersQuery($status: String) {\n    ProductOffer(status: $status) {\n      id\n      user_id\n      offer_price\n      prod_size\n      created_at\n      product_size_id\n      in_store\n      product {\n        slug\n        product_title\n        product_sku\n        image {\n          image_file\n        }\n      }\n    }\n  }\n": types.GetProductOffersQueryDocument,
    "\n  query ProductOfferQuery($status: String) {\n    SellerDashboard_DirectListingProductOffer(status: $status) {\n      id\n      user_id\n      offer_price\n      prod_size\n      created_at\n      product_size_id\n      in_store\n      product {\n        slug\n        product_title\n        product_sku\n        image {\n          image_file\n        }\n      }\n    }\n  }\n": types.ProductOfferQueryDocument,
    "\n  query SellerDashboardConsignmentProductOfferQuery($status: String) {\n    SellerDashboard_ConsignmentProductOffer(status: $status) {\n      product_title\n      product_sku\n      slug\n      lowest_offer\n      image {\n        image_file\n      }\n      product_sizes {\n        size\n        offer {\n          id\n          offer_price\n          ready_stock\n        }\n      }\n    }\n  }\n": types.SellerDashboardConsignmentProductOfferQueryDocument,
    "\n  query SellerDashboardSoldProductOfferQuery {\n    SellerDashboard_SoldProductOffer {\n      quantity\n      product_offer {\n        offer_price\n        prod_size\n        created_at\n        product_size_id\n        in_store\n        product {\n          slug\n          product_title\n          product_sku\n          image {\n            image_file\n          }\n        }\n      }\n    }\n  }\n": types.SellerDashboardSoldProductOfferQueryDocument,
    "\n  query SellerDashboardPendingProductOfferQuery($status: String) {\n    SellerDashboard_PendingProductOffer(status: $status) {\n      id\n      user_id\n      offer_price\n      prod_size\n      created_at\n      product_size_id\n      in_store\n      product {\n        slug\n        product_title\n        product_sku\n        image {\n          image_file\n        }\n      }\n    }\n  }\n": types.SellerDashboardPendingProductOfferQueryDocument,
    "\n  query GetOrderSummary($cartId: Int, $cartItem: CartItemInput) {\n    orderSummary(cart_id: $cartId, cart_item: $cartItem) {\n      total_exclude_processing_fee\n      cart_details {\n        offer_id\n        quantity\n        offer {\n          id\n          prod_size\n          offer_price\n          ready_stock\n          product {\n            id\n            product_title\n            product_sku\n            category_id\n            slug\n            image {\n              image_file\n            }\n          }\n        }\n      }\n    }\n  }\n": types.GetOrderSummaryDocument,
    "\n  query GetProductForHomePage {\n    productsForHomePage {\n      sneakers {\n        products {\n          section_name\n          products {\n            product_title\n            slug\n            image {\n              image_file\n            }\n            lowest_active_offer {\n              offer_price\n            }\n          }\n        }\n        recommended {\n          product_title\n          slug\n          image {\n            image_file\n          }\n          lowest_active_offer {\n            offer_price\n          }\n        }\n        best_seller_male {\n          product_title\n          slug\n          lowest_offer\n          image_file\n        }\n        best_seller_female {\n          product_title\n          slug\n          lowest_offer\n          image_file\n        }\n      }\n      apparels {\n        brands {\n          brand_name\n          products {\n            product_title\n            slug\n            image {\n              image_file\n            }\n            lowest_active_offer {\n              offer_price\n            }\n          }\n        }\n        recommended {\n          product_title\n          slug\n          image {\n            image_file\n          }\n          lowest_active_offer {\n            offer_price\n          }\n        }\n        best_seller_male {\n          product_title\n          slug\n          lowest_offer\n          image_file\n        }\n        best_seller_female {\n          product_title\n          slug\n          lowest_offer\n          image_file\n        }\n      }\n    }\n  }\n": types.GetProductForHomePageDocument,
    "\n  query GetProduct($slug: String!) {\n    product(slug: $slug) {\n      product_title\n      product_sku\n      total_quantity_sold\n      lowest_offer\n      slug\n      consignment\n      images {\n        image_file\n      }\n      product_sizes {\n        id\n        size\n        size_id\n        offer {\n          id\n          offer_price\n          ready_stock\n        }\n        online_offer {\n          id\n          offer_price\n          ready_stock\n        }\n        in_store_offer {\n          id\n          offer_price\n          ready_stock\n        }\n      }\n    }\n  }\n": types.GetProductDocument,
    "\n  query GetLowestActiveOfferAndLastSale($product_size_id: Int!) {\n    lowestActiveOfferAndLastSale(product_size_id: $product_size_id) {\n      lowest_offer\n      last_sale {\n        id\n        created_at\n        unit_price\n        size\n      }\n    }\n  }\n": types.GetLowestActiveOfferAndLastSaleDocument,
    "\n  query GetBrandsAndSizesForBrowsePage($category: String) {\n    brandAndSize(category: $category) {\n      brands\n      sizes\n    }\n  }\n": types.GetBrandsAndSizesForBrowsePageDocument,
    "\n  query GetProductsForBrowsePage(\n    $category: String\n    $brands: [String]\n    $sizes: [String]\n    $page: Int\n    $sortBy: String\n  ) {\n    browseProduct(\n      category: $category\n      brands: $brands\n      sizes: $sizes\n      page: $page\n      sort_by: $sortBy\n    ) {\n      data {\n        category_id\n        product_title\n        image_file\n        slug\n        lowest_offer\n      }\n      total\n      per_page\n      current_page\n      from\n      to\n      last_page\n      has_more_pages\n    }\n  }\n": types.GetProductsForBrowsePageDocument,
    "\n    query GetUserProfile {\n        userProfile {\n            id\n            name\n            email\n            mobile\n            birthdate\n            referral_code\n        }\n    }\n": types.GetUserProfileDocument,
    "\n    query GetVacationMode {\n        vacation_mode: userVacationMode\n    }\n": types.GetVacationModeDocument,
    "\n    query GetUserAddresses {\n        userAddress {\n            name\n            address_type\n            id\n            address_1\n            address_2\n            pincode\n            city\n            country\n            state\n            mobile\n        }\n    }\n": types.GetUserAddressesDocument,
    "\n    query GetUserDeliveryAddress {\n        userDeliveryAddress {\n            name\n            address_type\n            id\n            address_1\n            address_2\n            pincode\n            city\n            country\n            state\n            mobile\n        }\n    }\n": types.GetUserDeliveryAddressDocument,
    "\n    query GetOrderHistory($limit: Int, $page: Int) {\n        userOrder(limit: $limit, page: $page) {\n            data {\n                order_ref\n                created_at\n                order_total\n            }\n            total\n            per_page\n            current_page\n            from\n            to\n            last_page\n            has_more_pages\n        }\n    }\n": types.GetOrderHistoryDocument,
    "\n    query GetOrderDetails($orderRef: String!) {\n        userOrderDetail(order_ref: $orderRef) {\n            order_total\n            address\n            created_at\n            order_details {\n                product {\n                    product_title\n                    slug\n                }\n                quantity\n                unit_price\n                total_price\n                price\n                size\n            }\n        }\n    }\n": types.GetOrderDetailsDocument,
};

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = graphql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export function graphql(source: string): unknown;

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment SellerDashboard_GetProductDetails_SizesFragment on ProductSize {\n    id\n    size\n  }\n"): (typeof documents)["\n  fragment SellerDashboard_GetProductDetails_SizesFragment on ProductSize {\n    id\n    size\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query SellerDashboard_ProductDetailsQuery($slug: String!) {\n    SellerDashboard_GetProductDetails(slug: $slug) {\n      id\n      slug\n      product_title\n      product_sku\n      category_id\n      brand_id\n      product_description\n      lowest_offer\n      consignment\n      product_sizes {\n        id\n        size\n        ...SellerDashboard_GetProductDetails_SizesFragment\n      }\n    }\n  }\n"): (typeof documents)["\n  query SellerDashboard_ProductDetailsQuery($slug: String!) {\n    SellerDashboard_GetProductDetails(slug: $slug) {\n      id\n      slug\n      product_title\n      product_sku\n      category_id\n      brand_id\n      product_description\n      lowest_offer\n      consignment\n      product_sizes {\n        id\n        size\n        ...SellerDashboard_GetProductDetails_SizesFragment\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query SellerDashboard_GetBrandsAndCategories {\n    SellerDashboard_BrandsAndCategories {\n      brands {\n        id\n        brand_name\n      }\n      categories {\n        id\n        cat_name\n      }\n    }\n  }\n"): (typeof documents)["\n  query SellerDashboard_GetBrandsAndCategories {\n    SellerDashboard_BrandsAndCategories {\n      brands {\n        id\n        brand_name\n      }\n      categories {\n        id\n        cat_name\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation SellerDashboard_UpdateProductInformationMutation(\n    $id: Int!\n    $product_title: String!\n    $slug: String!\n    $product_sku: String!\n    $category_id: Int!\n    $new_category: String\n    $brand_id: Int!\n    $new_brand: String\n    $product_description: String\n    $lowest_offer: Float!\n  ) {\n    SellerDashboard_UpdateProductInformation(\n      id: $id\n      product_title: $product_title\n      slug: $slug\n      product_sku: $product_sku\n      category_id: $category_id\n      new_category: $new_category\n      brand_id: $brand_id\n      new_brand: $new_brand\n      product_description: $product_description\n      lowest_offer: $lowest_offer\n    ) {\n      product {\n        id\n        product_title\n        slug\n        product_sku\n        category_id\n        brand_id\n        product_description\n        lowest_offer\n      }\n      success\n      message\n    }\n  }\n"): (typeof documents)["\n  mutation SellerDashboard_UpdateProductInformationMutation(\n    $id: Int!\n    $product_title: String!\n    $slug: String!\n    $product_sku: String!\n    $category_id: Int!\n    $new_category: String\n    $brand_id: Int!\n    $new_brand: String\n    $product_description: String\n    $lowest_offer: Float!\n  ) {\n    SellerDashboard_UpdateProductInformation(\n      id: $id\n      product_title: $product_title\n      slug: $slug\n      product_sku: $product_sku\n      category_id: $category_id\n      new_category: $new_category\n      brand_id: $brand_id\n      new_brand: $new_brand\n      product_description: $product_description\n      lowest_offer: $lowest_offer\n    ) {\n      product {\n        id\n        product_title\n        slug\n        product_sku\n        category_id\n        brand_id\n        product_description\n        lowest_offer\n      }\n      success\n      message\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query SellerDashboard_ImageQuery($slug: String!) {\n    SellerDashboard_Image(slug: $slug) {\n      image_file\n    }\n  }\n"): (typeof documents)["\n  query SellerDashboard_ImageQuery($slug: String!) {\n    SellerDashboard_Image(slug: $slug) {\n      image_file\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation SellerDashboard_UpdateStockMutation($array: String!) {\n    SellerDashboard_UpdateStock(array: $array) {\n      success\n      message\n    }\n  }\n"): (typeof documents)["\n  mutation SellerDashboard_UpdateStockMutation($array: String!) {\n    SellerDashboard_UpdateStock(array: $array) {\n      success\n      message\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query SELLER_DASHBOARD__GET_PRODUCT_IS_CONSIGNMENT($slug: String!) {\n    SellerDashboard_GetProductIsConsignment(slug: $slug)\n  }\n"): (typeof documents)["\n  query SELLER_DASHBOARD__GET_PRODUCT_IS_CONSIGNMENT($slug: String!) {\n    SellerDashboard_GetProductIsConsignment(slug: $slug)\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query SellerDashboard_StockQuery($slug: String!) {\n    SellerDashboard_Stock(slug: $slug) {\n      seller_dashboard_product_sizes {\n        id\n        seller_dashboard_size {\n          size\n        }\n        seller_dashboard_offer {\n          prod_size\n          ready_stock\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query SellerDashboard_StockQuery($slug: String!) {\n    SellerDashboard_Stock(slug: $slug) {\n      seller_dashboard_product_sizes {\n        id\n        seller_dashboard_size {\n          size\n        }\n        seller_dashboard_offer {\n          prod_size\n          ready_stock\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment SellerDashboard_ProductFragment on Product {\n    id\n    product_title\n    product_sku\n    slug\n    image {\n      image_file\n    }\n  }\n"): (typeof documents)["\n  fragment SellerDashboard_ProductFragment on Product {\n    id\n    product_title\n    product_sku\n    slug\n    image {\n      image_file\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query SellerDashboard_ProductsQuery {\n    SellerDashboard_Products {\n      ...SellerDashboard_ProductFragment\n    }\n  }\n"): (typeof documents)["\n  query SellerDashboard_ProductsQuery {\n    SellerDashboard_Products {\n      ...SellerDashboard_ProductFragment\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation Login($email: String!, $password: String!) {\n        LoginMutation(email: $email, password: $password) {\n            user {\n                id\n                email\n                name\n                role\n            }\n            success\n            message\n            access_token\n        }\n    }\n"): (typeof documents)["\n    mutation Login($email: String!, $password: String!) {\n        LoginMutation(email: $email, password: $password) {\n            user {\n                id\n                email\n                name\n                role\n            }\n            success\n            message\n            access_token\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation Register(\n        $email: String!\n        $password: String!\n        $mobile: String!\n        $birthdate: String!\n        $name: String!\n        $referral_code: String\n    ) {\n        register(\n            email: $email\n            password: $password\n            mobile: $mobile\n            birthdate: $birthdate\n            name: $name\n            referral_code: $referral_code\n        ) {\n            success\n            message\n        }\n    }\n"): (typeof documents)["\n    mutation Register(\n        $email: String!\n        $password: String!\n        $mobile: String!\n        $birthdate: String!\n        $name: String!\n        $referral_code: String\n    ) {\n        register(\n            email: $email\n            password: $password\n            mobile: $mobile\n            birthdate: $birthdate\n            name: $name\n            referral_code: $referral_code\n        ) {\n            success\n            message\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation ForgotPassword($email: String!) {\n        forgotPassword(email: $email) {\n            success\n            message\n        }\n    }\n"): (typeof documents)["\n    mutation ForgotPassword($email: String!) {\n        forgotPassword(email: $email) {\n            success\n            message\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation ResetPassword(\n        $email: String!\n        $password: String!\n        $token: String!\n    ) {\n        resetPassword(email: $email, password: $password, token: $token) {\n            success\n            message\n        }\n    }\n"): (typeof documents)["\n    mutation ResetPassword(\n        $email: String!\n        $password: String!\n        $token: String!\n    ) {\n        resetPassword(email: $email, password: $password, token: $token) {\n            success\n            message\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation CreateProductOffer(\n    $size: String!\n    $product_size_id: Int!\n    $price: Int!\n    $list_type: String!\n  ) {\n    createProductOffer(\n      size: $size\n      product_size_id: $product_size_id\n      price: $price\n      list_type: $list_type\n    ) {\n      success\n      message\n    }\n  }\n"): (typeof documents)["\n  mutation CreateProductOffer(\n    $size: String!\n    $product_size_id: Int!\n    $price: Int!\n    $list_type: String!\n  ) {\n    createProductOffer(\n      size: $size\n      product_size_id: $product_size_id\n      price: $price\n      list_type: $list_type\n    ) {\n      success\n      message\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation UpdateProductOffer($offer_id: Int!, $price: Int!) {\n    UpdateProductOffer(offer_id: $offer_id, price: $price) {\n      success\n      message\n    }\n  }\n"): (typeof documents)["\n  mutation UpdateProductOffer($offer_id: Int!, $price: Int!) {\n    UpdateProductOffer(offer_id: $offer_id, price: $price) {\n      success\n      message\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation SellerDashboard_PublishPendingProductOfferMutation(\n    $offer_ids: [Int!]!\n  ) {\n    SellerDashboard_PublishPendingProductOffer(offer_ids: $offer_ids) {\n      success\n      message\n      product_offers {\n        id\n        user_id\n        offer_price\n        prod_size\n        created_at\n        product_size_id\n        in_store\n        product {\n          slug\n          product_title\n          product_sku\n          image {\n            image_file\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation SellerDashboard_PublishPendingProductOfferMutation(\n    $offer_ids: [Int!]!\n  ) {\n    SellerDashboard_PublishPendingProductOffer(offer_ids: $offer_ids) {\n      success\n      message\n      product_offers {\n        id\n        user_id\n        offer_price\n        prod_size\n        created_at\n        product_size_id\n        in_store\n        product {\n          slug\n          product_title\n          product_sku\n          image {\n            image_file\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation UpdateUserProfile(\n        $name: String\n        $email: String\n        $mobile: String\n        $birthdate: String\n        $vacation_mode: Int\n    ) {\n        updateUserProfile(\n            name: $name\n            email: $email\n            mobile: $mobile\n            birthdate: $birthdate\n            vacation_mode: $vacation_mode\n        ) {\n            success\n            message\n        }\n    }\n"): (typeof documents)["\n    mutation UpdateUserProfile(\n        $name: String\n        $email: String\n        $mobile: String\n        $birthdate: String\n        $vacation_mode: Int\n    ) {\n        updateUserProfile(\n            name: $name\n            email: $email\n            mobile: $mobile\n            birthdate: $birthdate\n            vacation_mode: $vacation_mode\n        ) {\n            success\n            message\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation UpdateUserPassword(\n        $current_password: String\n        $new_password: String\n    ) {\n        updateUserPassword(\n            current_password: $current_password\n            new_password: $new_password\n        ) {\n            success\n            message\n        }\n    }\n"): (typeof documents)["\n    mutation UpdateUserPassword(\n        $current_password: String\n        $new_password: String\n    ) {\n        updateUserPassword(\n            current_password: $current_password\n            new_password: $new_password\n        ) {\n            success\n            message\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation UpdateUserAddress(\n        $id: Int\n        $name: String\n        $address_type: String\n        $address_1: String\n        $address_2: String\n        $pincode: String\n        $city: String\n        $country: String\n        $state: String\n        $mobile: String\n    ) {\n        updateUserAddress(\n            id: $id\n            name: $name\n            address_type: $address_type\n            address_1: $address_1\n            address_2: $address_2\n            pincode: $pincode\n            city: $city\n            country: $country\n            state: $state\n            mobile: $mobile\n        ) {\n            success\n            message\n        }\n    }\n"): (typeof documents)["\n    mutation UpdateUserAddress(\n        $id: Int\n        $name: String\n        $address_type: String\n        $address_1: String\n        $address_2: String\n        $pincode: String\n        $city: String\n        $country: String\n        $state: String\n        $mobile: String\n    ) {\n        updateUserAddress(\n            id: $id\n            name: $name\n            address_type: $address_type\n            address_1: $address_1\n            address_2: $address_2\n            pincode: $pincode\n            city: $city\n            country: $country\n            state: $state\n            mobile: $mobile\n        ) {\n            success\n            message\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation ApplyPromoCode($promoCode: String!) {\n    applyPromoCode(promo_code: $promoCode) {\n      success\n      id\n      code\n      maximum_discount\n      discount\n      discount_type\n      success\n      message\n    }\n  }\n"): (typeof documents)["\n  mutation ApplyPromoCode($promoCode: String!) {\n    applyPromoCode(promo_code: $promoCode) {\n      success\n      id\n      code\n      maximum_discount\n      discount\n      discount_type\n      success\n      message\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation OnboardSeller {\n    OnboardSeller {\n      url\n      success\n      message\n    }\n  }\n"): (typeof documents)["\n  mutation OnboardSeller {\n    OnboardSeller {\n      url\n      success\n      message\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetProductOffersQuery($status: String) {\n    ProductOffer(status: $status) {\n      id\n      user_id\n      offer_price\n      prod_size\n      created_at\n      product_size_id\n      in_store\n      product {\n        slug\n        product_title\n        product_sku\n        image {\n          image_file\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetProductOffersQuery($status: String) {\n    ProductOffer(status: $status) {\n      id\n      user_id\n      offer_price\n      prod_size\n      created_at\n      product_size_id\n      in_store\n      product {\n        slug\n        product_title\n        product_sku\n        image {\n          image_file\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query ProductOfferQuery($status: String) {\n    SellerDashboard_DirectListingProductOffer(status: $status) {\n      id\n      user_id\n      offer_price\n      prod_size\n      created_at\n      product_size_id\n      in_store\n      product {\n        slug\n        product_title\n        product_sku\n        image {\n          image_file\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query ProductOfferQuery($status: String) {\n    SellerDashboard_DirectListingProductOffer(status: $status) {\n      id\n      user_id\n      offer_price\n      prod_size\n      created_at\n      product_size_id\n      in_store\n      product {\n        slug\n        product_title\n        product_sku\n        image {\n          image_file\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query SellerDashboardConsignmentProductOfferQuery($status: String) {\n    SellerDashboard_ConsignmentProductOffer(status: $status) {\n      product_title\n      product_sku\n      slug\n      lowest_offer\n      image {\n        image_file\n      }\n      product_sizes {\n        size\n        offer {\n          id\n          offer_price\n          ready_stock\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query SellerDashboardConsignmentProductOfferQuery($status: String) {\n    SellerDashboard_ConsignmentProductOffer(status: $status) {\n      product_title\n      product_sku\n      slug\n      lowest_offer\n      image {\n        image_file\n      }\n      product_sizes {\n        size\n        offer {\n          id\n          offer_price\n          ready_stock\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query SellerDashboardSoldProductOfferQuery {\n    SellerDashboard_SoldProductOffer {\n      quantity\n      product_offer {\n        offer_price\n        prod_size\n        created_at\n        product_size_id\n        in_store\n        product {\n          slug\n          product_title\n          product_sku\n          image {\n            image_file\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query SellerDashboardSoldProductOfferQuery {\n    SellerDashboard_SoldProductOffer {\n      quantity\n      product_offer {\n        offer_price\n        prod_size\n        created_at\n        product_size_id\n        in_store\n        product {\n          slug\n          product_title\n          product_sku\n          image {\n            image_file\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query SellerDashboardPendingProductOfferQuery($status: String) {\n    SellerDashboard_PendingProductOffer(status: $status) {\n      id\n      user_id\n      offer_price\n      prod_size\n      created_at\n      product_size_id\n      in_store\n      product {\n        slug\n        product_title\n        product_sku\n        image {\n          image_file\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query SellerDashboardPendingProductOfferQuery($status: String) {\n    SellerDashboard_PendingProductOffer(status: $status) {\n      id\n      user_id\n      offer_price\n      prod_size\n      created_at\n      product_size_id\n      in_store\n      product {\n        slug\n        product_title\n        product_sku\n        image {\n          image_file\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetOrderSummary($cartId: Int, $cartItem: CartItemInput) {\n    orderSummary(cart_id: $cartId, cart_item: $cartItem) {\n      total_exclude_processing_fee\n      cart_details {\n        offer_id\n        quantity\n        offer {\n          id\n          prod_size\n          offer_price\n          ready_stock\n          product {\n            id\n            product_title\n            product_sku\n            category_id\n            slug\n            image {\n              image_file\n            }\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetOrderSummary($cartId: Int, $cartItem: CartItemInput) {\n    orderSummary(cart_id: $cartId, cart_item: $cartItem) {\n      total_exclude_processing_fee\n      cart_details {\n        offer_id\n        quantity\n        offer {\n          id\n          prod_size\n          offer_price\n          ready_stock\n          product {\n            id\n            product_title\n            product_sku\n            category_id\n            slug\n            image {\n              image_file\n            }\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetProductForHomePage {\n    productsForHomePage {\n      sneakers {\n        products {\n          section_name\n          products {\n            product_title\n            slug\n            image {\n              image_file\n            }\n            lowest_active_offer {\n              offer_price\n            }\n          }\n        }\n        recommended {\n          product_title\n          slug\n          image {\n            image_file\n          }\n          lowest_active_offer {\n            offer_price\n          }\n        }\n        best_seller_male {\n          product_title\n          slug\n          lowest_offer\n          image_file\n        }\n        best_seller_female {\n          product_title\n          slug\n          lowest_offer\n          image_file\n        }\n      }\n      apparels {\n        brands {\n          brand_name\n          products {\n            product_title\n            slug\n            image {\n              image_file\n            }\n            lowest_active_offer {\n              offer_price\n            }\n          }\n        }\n        recommended {\n          product_title\n          slug\n          image {\n            image_file\n          }\n          lowest_active_offer {\n            offer_price\n          }\n        }\n        best_seller_male {\n          product_title\n          slug\n          lowest_offer\n          image_file\n        }\n        best_seller_female {\n          product_title\n          slug\n          lowest_offer\n          image_file\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetProductForHomePage {\n    productsForHomePage {\n      sneakers {\n        products {\n          section_name\n          products {\n            product_title\n            slug\n            image {\n              image_file\n            }\n            lowest_active_offer {\n              offer_price\n            }\n          }\n        }\n        recommended {\n          product_title\n          slug\n          image {\n            image_file\n          }\n          lowest_active_offer {\n            offer_price\n          }\n        }\n        best_seller_male {\n          product_title\n          slug\n          lowest_offer\n          image_file\n        }\n        best_seller_female {\n          product_title\n          slug\n          lowest_offer\n          image_file\n        }\n      }\n      apparels {\n        brands {\n          brand_name\n          products {\n            product_title\n            slug\n            image {\n              image_file\n            }\n            lowest_active_offer {\n              offer_price\n            }\n          }\n        }\n        recommended {\n          product_title\n          slug\n          image {\n            image_file\n          }\n          lowest_active_offer {\n            offer_price\n          }\n        }\n        best_seller_male {\n          product_title\n          slug\n          lowest_offer\n          image_file\n        }\n        best_seller_female {\n          product_title\n          slug\n          lowest_offer\n          image_file\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetProduct($slug: String!) {\n    product(slug: $slug) {\n      product_title\n      product_sku\n      total_quantity_sold\n      lowest_offer\n      slug\n      consignment\n      images {\n        image_file\n      }\n      product_sizes {\n        id\n        size\n        size_id\n        offer {\n          id\n          offer_price\n          ready_stock\n        }\n        online_offer {\n          id\n          offer_price\n          ready_stock\n        }\n        in_store_offer {\n          id\n          offer_price\n          ready_stock\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetProduct($slug: String!) {\n    product(slug: $slug) {\n      product_title\n      product_sku\n      total_quantity_sold\n      lowest_offer\n      slug\n      consignment\n      images {\n        image_file\n      }\n      product_sizes {\n        id\n        size\n        size_id\n        offer {\n          id\n          offer_price\n          ready_stock\n        }\n        online_offer {\n          id\n          offer_price\n          ready_stock\n        }\n        in_store_offer {\n          id\n          offer_price\n          ready_stock\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetLowestActiveOfferAndLastSale($product_size_id: Int!) {\n    lowestActiveOfferAndLastSale(product_size_id: $product_size_id) {\n      lowest_offer\n      last_sale {\n        id\n        created_at\n        unit_price\n        size\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetLowestActiveOfferAndLastSale($product_size_id: Int!) {\n    lowestActiveOfferAndLastSale(product_size_id: $product_size_id) {\n      lowest_offer\n      last_sale {\n        id\n        created_at\n        unit_price\n        size\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetBrandsAndSizesForBrowsePage($category: String) {\n    brandAndSize(category: $category) {\n      brands\n      sizes\n    }\n  }\n"): (typeof documents)["\n  query GetBrandsAndSizesForBrowsePage($category: String) {\n    brandAndSize(category: $category) {\n      brands\n      sizes\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetProductsForBrowsePage(\n    $category: String\n    $brands: [String]\n    $sizes: [String]\n    $page: Int\n    $sortBy: String\n  ) {\n    browseProduct(\n      category: $category\n      brands: $brands\n      sizes: $sizes\n      page: $page\n      sort_by: $sortBy\n    ) {\n      data {\n        category_id\n        product_title\n        image_file\n        slug\n        lowest_offer\n      }\n      total\n      per_page\n      current_page\n      from\n      to\n      last_page\n      has_more_pages\n    }\n  }\n"): (typeof documents)["\n  query GetProductsForBrowsePage(\n    $category: String\n    $brands: [String]\n    $sizes: [String]\n    $page: Int\n    $sortBy: String\n  ) {\n    browseProduct(\n      category: $category\n      brands: $brands\n      sizes: $sizes\n      page: $page\n      sort_by: $sortBy\n    ) {\n      data {\n        category_id\n        product_title\n        image_file\n        slug\n        lowest_offer\n      }\n      total\n      per_page\n      current_page\n      from\n      to\n      last_page\n      has_more_pages\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query GetUserProfile {\n        userProfile {\n            id\n            name\n            email\n            mobile\n            birthdate\n            referral_code\n        }\n    }\n"): (typeof documents)["\n    query GetUserProfile {\n        userProfile {\n            id\n            name\n            email\n            mobile\n            birthdate\n            referral_code\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query GetVacationMode {\n        vacation_mode: userVacationMode\n    }\n"): (typeof documents)["\n    query GetVacationMode {\n        vacation_mode: userVacationMode\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query GetUserAddresses {\n        userAddress {\n            name\n            address_type\n            id\n            address_1\n            address_2\n            pincode\n            city\n            country\n            state\n            mobile\n        }\n    }\n"): (typeof documents)["\n    query GetUserAddresses {\n        userAddress {\n            name\n            address_type\n            id\n            address_1\n            address_2\n            pincode\n            city\n            country\n            state\n            mobile\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query GetUserDeliveryAddress {\n        userDeliveryAddress {\n            name\n            address_type\n            id\n            address_1\n            address_2\n            pincode\n            city\n            country\n            state\n            mobile\n        }\n    }\n"): (typeof documents)["\n    query GetUserDeliveryAddress {\n        userDeliveryAddress {\n            name\n            address_type\n            id\n            address_1\n            address_2\n            pincode\n            city\n            country\n            state\n            mobile\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query GetOrderHistory($limit: Int, $page: Int) {\n        userOrder(limit: $limit, page: $page) {\n            data {\n                order_ref\n                created_at\n                order_total\n            }\n            total\n            per_page\n            current_page\n            from\n            to\n            last_page\n            has_more_pages\n        }\n    }\n"): (typeof documents)["\n    query GetOrderHistory($limit: Int, $page: Int) {\n        userOrder(limit: $limit, page: $page) {\n            data {\n                order_ref\n                created_at\n                order_total\n            }\n            total\n            per_page\n            current_page\n            from\n            to\n            last_page\n            has_more_pages\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query GetOrderDetails($orderRef: String!) {\n        userOrderDetail(order_ref: $orderRef) {\n            order_total\n            address\n            created_at\n            order_details {\n                product {\n                    product_title\n                    slug\n                }\n                quantity\n                unit_price\n                total_price\n                price\n                size\n            }\n        }\n    }\n"): (typeof documents)["\n    query GetOrderDetails($orderRef: String!) {\n        userOrderDetail(order_ref: $orderRef) {\n            order_total\n            address\n            created_at\n            order_details {\n                product {\n                    product_title\n                    slug\n                }\n                quantity\n                unit_price\n                total_price\n                price\n                size\n            }\n        }\n    }\n"];

export function graphql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;